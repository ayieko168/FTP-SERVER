from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

from bin.utils import *
from bin.main_backend import FTPServerWorker, AboutApp, SettingsApp
from bin.ui_about import Ui_Dialog

config_vars = get_config_variables()
LOCAL_HOST_IP = get_local_ip()
ftp_worker = FTPServerWorker()


def main():

    app = QApplication([])
    app.setQuitOnLastWindowClosed(False)

    ## Get json data
    ftp_worker.start()


    # Adding an icon
    icon = QIcon("bin/data/terminal-network.gif")

    # Adding item on the menu bar
    tray = QSystemTrayIcon()
    tray.setIcon(icon)
    tray.setVisible(True)
    tray.showMessage("FTP Server Started", f"The FTP server is now running on {LOCAL_HOST_IP}")

    ## Creating the options
    menu = QMenu()
    # Settings option
    settings_option = QAction("Settings")
    settings_option.triggered.connect(settings_callback)
    # About Option
    about_option = QAction("About")
    about_option.triggered.connect(about_callback)
    # Quit Option
    restart = QAction("Restart")
    restart.triggered.connect(restart_callback)
    # Quit Option
    quit = QAction("Quit")
    quit.triggered.connect(app.quit)


    ## Add the options to the menu
    menu.addAction(settings_option)
    menu.addAction(about_option)
    menu.addSeparator()
    menu.addAction(restart)
    menu.addSeparator()
    menu.addAction(quit)

    # Adding options to the System Tray
    tray.setToolTip(f"Ace Local FTP Server\n - IP: {LOCAL_HOST_IP}\n - PORT: {config_vars['FTP_PORT']}")
    tray.setContextMenu(menu)

    app.exec()


def restart_callback():

    print("\n\tRestarting FTP Server...")

    ftp_worker.stop()
    print(f"isRunning: {ftp_worker.isRunning()} isFinished: {ftp_worker.isFinished()}")

    ftp_worker.start()
    print(f"isRunning: {ftp_worker.isRunning()} isFinished: {ftp_worker.isFinished()}")


def about_callback():

    abt_app = AboutApp()
    # abt_app.show()
    abt_app.exec()


def settings_callback():

    sett_app = SettingsApp(restart_callback)
    # abt_app.show()
    sett_app.exec()





if __name__ == '__main__':
    main()
























































































































































































































































































































































































































































































































































































































































































































































